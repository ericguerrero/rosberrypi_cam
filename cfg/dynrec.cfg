


PACKAGE='dynamic_reconfigure_test'
NODE='rosberrypi_cam_node'
CONFIG='dynrec'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
gen.const("int_const", int_t, 5, "An int constant.")
gen.const("double_const", double_t, 5.6, "A double constant.")
gen.const("str_const", str_t, "foo", "A string constant.")
gen.const("bool_const", bool_t, True, "A bool constant.")

enum = gen.enum([ gen.const("Small", int_t, 0, "A small constant"),
gen.const("Medium", int_t, 1, "A medium value"),
gen.const("Large", int_t, 2, "A large value"),
gen.const("ExtraLarge", int_t, 3, "An extra large value") ], "An enum to set the size.")

gen.add("int_enum_", int_t, 1, "Int enum",0, 0, 3, edit_method = enum)
gen.add("int_", int_t, 1, "Int parameter",0, -10, 10)
gen.add("double_", double_t, 2, "double parameter",0, -2, 10)
gen.add("str_", str_t, 4, "String parameter","foo")
gen.add("mstr_", str_t, 4, "Multibyte String parameter","bar")
gen.add("bool_", bool_t, 8, "Boolean parameter",False)
gen.add("level", int_t, 16, "Contains the level of the previous change",0)
gen.add("int_nodefault", int_t, 0, "Checks against regression of #4499")
gen.add("i", int_t, 0, "Checks against regression of https://github.com/ros/dynamic_reconfigure/issues/6")

group1 = gen.add_group("Group One", state = True)
group1.add("group1_int", int_t, 1, "A second level group parameter", 2)
group2 = group1.add_group("GROUP2", type="collapse", state=False)
group2.add("group2_double", double_t, 0, "A third level group parameter", 3.333)
group2.add("group2_string", str_t, 0, "A third level group parameter", "test string")
group2.add("some_other", str_t, 0, "Something", "AAAAAAGGHH")
group2.add("variable", bool_t,0, "A boolean", True)
group3 = group2.add_group("Group3")
group3.add("deep_var_int", int_t, 0, "Were very far down now", 0, 0, 3, edit_method = enum)
group3.add("deep_var_bool", bool_t, 0, "Were even farther down now!!", True)

group12 = gen.add_group("Upper Group 2")
group12.add("some_param", int_t, 0, "Some param", 20)

exit(gen.generate(PACKAGE, NODE, CONFIG))
